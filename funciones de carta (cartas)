#include <iostream>
#include <random>

void barajarBaraja(Carta* baraja, int numCartas) {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distribucion(0, numCartas - 1);

    for (int i = numCartas - 1; i > 0; --i) {
        int j = distribucion(gen);
        //Intercambiar baraja[i] y baraja[j] 
        Carta temp = baraja[i];
        baraja[i] = baraja[j];
        baraja[j] = temp;
    }
}

//cartas por indice (temporal)

Carta* obtenerCartaPorIndice(Jugador& jugador, int indice) {
    NodoCarta* actual = jugador.mano.cabeza;
    for (int i = 0; i < indice; ++i) {
        if (actual == nullptr || actual->siguiente == nullptr) {
            return nullptr; // Índice fuera de rango
        }
        actual = actual->siguiente;
    }
    if (actual != nullptr) {
        return &(actual->data);
    }
    return nullptr;
} //compila

//para eliminar un nodo por índice de la lista enlazada

bool eliminarCartaPorIndice(Mano& mano, int indice) {
    if (indice < 0 || indice >= mano.cantidadCartas()) {
        return false; // Índice fuera de rango
    }
    NodoCarta* actual = mano.cabeza;
    NodoCarta* previo = nullptr;
    for (int i = 0; i < indice; ++i) {
        prev = actual;
        actual = actual->siguiente;
    }
    if (prev == nullptr) {
        mano.cabeza = actual->siguiente;
    } else {
        prev->siguiente = actual->siguiente;
    }
    delete actual;
    mano.numCartas--;
    return true;
}
//compila 
void jugarRonda(Jugador jugadores[NUM_JUGADORES]) {
    int jugadorActual = -1;
    std::vector<Carta> cartasEnMesa; // Para almacenar las cartas del jugador
    int pasesConsecutivos = 0;
    int jugadoresSinCartas = 0;
    bool rondaTerminada = false;
    bool primeraRonda = true; //nota1

 if (primeraRonda) {
        jugadorActual = encontrarJugadorInicial(jugadores);
        primeraRonda = false; // Desactivar interaccion
    } else {
        // Lógica para encontrar al Mendigo de la ronda anterior (a implementar)
        jugadorActual = 0; // Temporalmente inicia el jugador 0
    }

    while (!rondaTerminada) {
        std::cout << "\nTurno del Jugador " << jugadores[jugadorActual].id << std::endl;
        std::cout << "Mano del Jugador " << jugadores[jugadorActual].id << ": ";
        NodoCarta* temp = jugadores[jugadorActual].mano.cabeza;
        int indice = 0;
        std::vector<NodoCarta*> nodosMano; // Almacenar los nodos 
        while (temp != nullptr) {
            std::cout << "[" << indice << "] ";
            imprimirCarta(temp->data);
            nodosMano.push_back(temp);
            if (temp->siguiente != nullptr) {
                std::cout << ", ";
            }
            temp = temp->siguiente;
            indice++;
        }
        std::cout << std::endl;
//mañama veo si compila


